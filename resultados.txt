Que falta:

2. automatizar llamadas a la API, usando python, podria implementarse con un for, reptiendo el codigo con cada valor de dataset de 1000 filas. Tomar el tiempo sin cache (el tiempo que se tiene abajo es con Postman, asi que seria ideal comparar que tal es la diferencia de rendimiento)

3. implementar un cache personalizado, el shun hizo LRU con REST, pero no se como funciona o si se apega a lo que necesitamos

4. realizar pruebas de rendimiento, considerando para cada escenario (con y sin cache) la modificacion de una o mas metricas:
    i.  disminuir el tamaño de la memoria RAM disponible
    ii. modificar CPU

5. solo investigar y realizar supuestos, sobre la capacidad de escalar usando cache personalizado, para ello, responder preguntas como: que se puede hacer para escalar el sistema distribuido, complejidades, aumento en la capacidad de almacenamiento. Supuestos aplicados a restricciones de hardware, recordar que no puede escalar de forma infinita. Revisar que tan conveniente es usar el sistema propuesto considerando: TTL, tecnicas de particionamiento, politicas de remocion, tamaño del cache.

6. usar contenedores y crear un cluster usando redis, asi se tendra un cache distribuido. Para usarlos, implementar indices. Cada particion tendra un indice que se asignara a los datos de cache de redis.

7. aplicar lo siguiente:
    i.  gRPC para manejar las consultas a la API. Contrastar resultados con consultas realizadas por REST.

Resultados:

1. API usando un dataset de 1.000 consultas, el cual fue ejecutado sobre la url de consulta:

    https://swapi.dev/api/people/?search={{character}}

    (donde character es el nombre de la columna del dataset)

    - El tiempo de respuesta promedio es de: 355 ms
    - Se tiene un archivo con los resultados del test (resultados/postman_solo_api.json)
    - En este escenario no se ha implementado Redis ni algun otro gestor de cache, por lo que las consultas son directamente transferidas a la API.

2. Se usa Redis para probar la API usando el mismo dataset, para asi obtener una metrica mas fiable:

    - La consulta se realiza de la misma manera, usando Postman sobre la url:

    - El tiempo promedio es de: 


NOTAS:
- El dataset utilizado solo tiene datos que si se encuentran en la API, no se han realizado consultas que entreguen un error 404.